{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 UbuntuMono-Regular;\f1\fnil\fcharset0 UbuntuMono-Italic;}
{\colortbl;\red255\green255\blue255;\red77\green77\blue77;\red255\green39\blue18;\red62\green62\blue62;
\red184\green14\blue61;\red247\green238\blue241;\red217\green11\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11700\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf2 - - - - - - - - - - - - - - - - - - - - - - - - - - -\
- - - - - - - - - - - - - - - - - - - - - - - - - - -\
Lesson 2 \
- - - - - - - - - - - - - - - - - - - - - - - - - - -\
- - - - - - - - - - - - - - - - - - - - - - - - - - -\
\
commit: snapshot of a repository\
repository: bunch of files\
staging area: you put files on it before to make a commit\
\
ls -a: list of all files, included the ones with a doth, which are hidden for users, ex: .git\
\
git init        - initialize a git repository. Create a repository\
git add         - add a file or changes to the staging area, ready to make a commit\
git add .       - add all files that have been changed\
git status	  - show what files are ready to commit in green. The untracked files in red.\
git commit -m   - commit files from the staging area \
\
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
1. What happens when you initialize a repository? Why do you need to do it?\
When you initialize a repository, a .git file is created. To see it, you\'92ll need to run \kerning1\expnd0\expndtw0 ls -a.\
\expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf2 \kerning1\expnd0\expndtw0 git init: initialize the repository.Git doesn\'92t create any commits for you.  You\'92ll have to create the first commit yourself.\
\
git status: \
Initial commit - you still need to make the initial commit\
\
Untracked files - show the untracked files\expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\
2. How is the staging area different from the working directory and the repository?\
What value do you think it offers?\
\
You can add files individually to the \'93staging area\'94 just using \cf3 git add 
\f1\i name_file 
\f0\i0 \cf2 \
Ex: git add lesson_1_reflections\
\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
If you accidentally add a file to the staging area, you can remove it using \cf5 \cb6 \expnd0\expndtw0\kerning0
git reset\cf4 \cb1 \expnd0\expndtw0\kerning0
. For example, if you accidentally add lesson_2_reflections.txt, but don\'92t want it to be committed yet, run \cf5 \cb6 \expnd0\expndtw0\kerning0
git reset lesson_2_reflections.txt\cf4 \cb1 \expnd0\expndtw0\kerning0
 and the file will be removed from the staging area, but it will still be in your working directory.\cf2 \expnd0\expndtw0\kerning0
\
\
\
3. How can you use the staging area to make sure you have one commit per logical\
change?\
\
- Add file to the staging area typing: \cf3 git add 
\f1\i name_file 
\f0\i0 \cf2 \expnd0\expndtw0\kerning0
, \
- Then, use \cf3 \expnd0\expndtw0\kerning0
git status \cf2 \expnd0\expndtw0\kerning0
to make sure you have only the files you want to commit. You\'92ll see a message: Changes to be committed and the files in green.\
- When you\'92re ready, use \cf7 git commit -m \'93Commit message\'94 \cf2 \
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\
4. What are some situations when branches would be helpful in keeping your history\
organized? How would branches help?\
\
5. How do the diagrams help you visualize the branch structure?\
\
6. What is the result of merging two branches together? Why do we represent it in\
the diagram the way we do?\
\
7. What are the pros and cons of Git automatic merging vs. always doing merges\
manually?\
}