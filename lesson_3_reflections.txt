- - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - -
Lesson 3 
- - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - -
>> $git log -n 1     - shows a number of commit history, in this case only one
>> $git log -p -2    - shows the difference introduced in each commit. You can also use -2, which limits the output to only the last two entries 
>> $git log --stat   -stats for each commit
>> $ git log --pretty=oneline    - Another really useful option is --pretty. This option changes the log output to formats other than the default. A few prebuilt options are available for you to use. The oneline option prints each commit on a single line, which is useful if you’re looking at a lot of commits. In addition, the short, full, and fuller options show the output in roughly the same format but with less or more information, respectively:
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test

>> $ git log --pretty=format:"%h - %an, %ar : %s"   - The most interesting option is format, which allows you to specify your own log output format. This is especially useful when you’re generating output for machine parsing – because you specify the format explicitly, you know it won’t change with updates to Git:
%h - abbreviated commit hash
%an - author name
%ar - author date, relative
$s  - subject
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test

>> Local:
- Working directory
- Staging area
- Commit history

If I checkout to my local master and run the below commands, the files would be change on these places:
- edit and save README.md: local working directory (only changes the working dir)
- git add README.md: local staging area (only changes the staging area)
- git commit: local master branch (the commit command changes the master branch log)
- git pull origin master: working directory, stating area, local master branch (since I have the master branch checked out, this will also update my working directory and staging area).
- git push origin master: GitHub master branch (it will take what’s in the local version and push it to the remote, so update the origin/master in remote)
- merge new_branch pull request: GitHub master branch (if I have a pull request to merge that branch into master, this is accepted and merge in. Then, the new branch will get merged with GitHub master branch).

$git diff —-staged   - check differences between what had been added to the Staging area and the master branch. This is before use $git commit

Git is a part of GitHub
Clone operates with remote
When you push or pull operates on branches, taken a branch an push or pull to/from the origin or remote repository.


Steps to add a remote repository on GitHub
1- on GitHub create a new repository

2- copy the url given by Github

3- make sure there are no remote repos in your local
>>git remote     - list remote repositories

4- add the remote repository name, it is usually “origin”, and the url you picked in step 2.
>>git remote add origin url_git   

5- make sure you have created the remote repo, -v is verbose for more info
>>git remote -v 

To list all branches: 
>>git branches -a

6- send or push changes to the remote use the command git push. It takes two arguments, the remote I want to send changes to (in this case I named it “origin”), and the name of the local branch that I’d like to push 
>>git push origin master
//this means: send changes to the remote branch I created “origin” (step 4), from my local branch “master”. If you push the master branch, the local origin/master branch and the remote GitHub branch will get updated with the new commit.

7- to pull the latest version of the remote repo, you’ll need to pull changes from origin to your master
>>git pull origin master
//this means: pull or obtain the remote version “origin” into my local version “master”

- - - - - - - - - - - - - - - - - - - - - - — - - — 
How to stash your work from your Working directory?
- - - - - - - - - - - - - - - - - - - - - - — - - — 

You’re working on a project but don’t want to add changes to the staging area and commit your work. So, you’ll need to use the stash commit to get back to your unfinished changes at any time.
1. I want to switch branches and to do so, I need to stash the changes of my Working directory because it has unfinished work: lesson3_reflections.txt  

- $git status
!!!!message: 
	error: Your local changes to the following files would be overwritten by checkout:
	lesson_3_reflections.txt
	Please, commit your changes or stash them before you can switch branches.
	Aborting!!!!

- To push a new stash onto your stack, run $git stash
$git stash
Saved working directory and index state WIP on lesson3: 37847e4 Change to .txt format
HEAD is now at 37847e4 Change to .txt format

- Now your working directory is clean
$ git status
# On branch master
nothing to commit, working directory clean

-Now you can switch branches an do work elsewhere, your changes are stored on your stack. To see what stashes are stored $git stash list
$git stash list
stash@{0}: WIP on lesson3: 37847e4 Change to .txt format

-If you want to apply to one of the older stashes use $git stash apply stash@{0}. If there is only one stash or you don’t specify one, Git assumes the most recent one
$git stash apply
On branch lesson3
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lesson_3_reflections.txt

no changes added to commit (use "git add" and/or "git commit -a")

- The apply option only tries to apply the stashed work — you continue to have it on your stack. To remove it, you can run git stash drop with the “name” of the stash to remove

$git stash drop stash@{0}
Dropped stash@{0} (24389c8e2955777a7635987fdc5a933ed45786fc)

-Finally you’ll be able to add to the Staging area and commit changes.


- - - - - - - - - - - - - - - - - - - - - - — - - — 
How to delete from git history a file deleted?
- - - - - - - - - - - - - - - - - - - - - - — - - — 
1. If you have deleted a file from your Working directory, you’ll need to  delete this from git and then amend this change to a previous commit. For example, I deleted from my Working directory this file.rtf, first, I add with -A command (all) files to the Staging Area. This add files, included the deleted ones.
- git add -A lesson_3_reflections.rtf

2. $git commit --amend 
With this command, I’ll include this add that includes the deleted file into the previous command. So, the editor is opened, just save it.
My file lesson_3_reflections.rtf no longer is included into the history.

- - - - - - - - - - - - - - - - - - - - - - — - - — 
How to add commits to your previous commit?
- - - - - - - - - - - - - - - - - - - - - - — - - — 
- Add changes to the Staging area
$ git add . or $git add name_file

- Use commit amend to send this changes to the previous commit, if you want you can change the message with the editor.
$ git commit --amend




———————————   Reflections   ———————————

1 - When would you want to use a remote repository rather than keeping all your work
local?

When we’re sharing our work with my coworkers or doing an online project, and also make sure there is an online backup.

2 - Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

To make sure you have the latest version of the remote repository.

3 - Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Branches: I can create branches of a repository in my local
$git checkout -b my_new_branch

Clone: I can clone a complete repository from local to local, from GitHub to local.
$ git clone url

Fork: GitHub creates a clone of an online repository in my GitHub account. Then, I can clone that online repo to my local using $git clone url. Finally, I’ll be able to push changes to origin from my master $git push origin master

4 - What is the benefit of having a copy of the last known state of the remote
stored locally?

If you have cloned a repository, you should want to get everything up-to-date, it would require merging local and remote branches. When you clone a repo, there is a local copy origin/master. If you want a list of remote branches use $git branch -a

When there are potentially conflicted changes, run $git fetch origin
Used this command to update local copy of your remote branch, which is “origin/master” (the name of the remote is origin and the name of the branch is master, which is separated by slash /). This leaves your actual local version alone.
>>>>>$git fetch origin

Then, you can use $git log and $git diff to see what changes were introduced.
To compare my master with origin/master local
>>>>>$git log origin/master
>>>>>$git log master   
>>>>>$git diff origin/master master    - Check differences between local origin/master and my master branch. Since, local origin/master is updated with GitHub repo because I used fetch before.

Note:
$git fetch origin     ///update the local origin/master with the last version from GitHub
$git merge master origin/master    ///incorporate changes from local origin/master to the local master branch
- - -  is the same as - - - - 
$git pull origin master  ///First, the remote branch from GitHub gets fetched, updating the local copy (local origin/master )of the remote branch, then that branch (local origin/master) gets merged into the local one (master).

When you finished your work and resolve conflicts,push your changes from the local master to origin in the remote repo in GitHub.
$git push origin master

If you’re happen to be offline, you could obtain the latest version of GitHub repo using $git fetch origin, and then use git diff and git log to see if there is some conflicts before merging.

5 - How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

It would be harder to keep track of the entire project and the changes made. 

6 - When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

You could make your changes directly to the master branch in your fork, but when contributing to a public repository, it’s standard practice to make the changes in a non-master branch within the fork. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready.

Steps to collaborate, whether I’m working on a feature or a bug.
Case 1:
——————
-If you want to clone a repository from GitHub, first “fork” the original repository on GitHub. This will create a remote repo for you in your account
>>Being on GitHub click on “fork” button
-Local. Clone your fork using your local terminal. On your GitHub, click on Clone and copy the url for the repository. Then, being in your local on the folder you want to clone that repository, use clone command.
my_desire_folder >>$git clone url
ex: git clone https://github.com/karlajaramillo/create-your-own-adventure.git
-Local. Make a branch to make your changes. Follow Case 2 *****


Case 2:
——————
If you already have a remote repository on GitHub
-Pull changes from remote origin/master into my local master branch. To stay up to date
>>$git pull origin master

*****-Create and checkout to a new branch
>> $git checkout -b my_new_branch
-Being on that new branch, make the changes on your docs
-Add changes to the Staging area and commit them to update master branch 
>> $ git add . or $git add mydoc.txt
>> $ git commit -m “Your message here”
-Push your changes from your branch to the remote repository origin/master or your fork(if you fork a repository on GitHub).
my_new_branch>> $git push origin my_new_branch

>>On GitHub, being on my_new_branch create a pull request to ask s.o else for merging your new_branch into master. Click on “New Pull request”
>>Then, when there is no conflicts and I have a green light from my collaborators. On GitHub, merge with my master (base fork, from my account), pressing the button to do so.
>>Finally, pull the changes from the origin/master to my local master branch
$git pull origin master   - update your local master branch
Note: you can delete your new_branch locally and remotely, since your commits had been included into the log history of the master branch.



Case 3: Updating a Cross-repository Pull Request
——————
Suppose I have forked a repository, cloned and made a branch with changes. 
The original repository exists, people make changes on it and I don’t have permission to push changes on it. 
I want to have my local master updated. Since my fork on GitHub doesn’t have the latest changes.Then, I’ll need to “add a remote repository” to pull changes from that remote to my local master. The name will be upstream, which will be the online master version. I can’t use “origin” because I’ve already have one (for my fork repository). 

upstream: name for the master of the original repository (online)
origin: name for the master of my fork repository (online)

- Add the original repository as a remote in my clone. Being in your directory and branch.
my_branch>>$git remote add upstream git@github.com:udacity/create-your-own-adventure.git
upstream: this will be the name of the original repo online, upstream/master

- Pull the “master” branch from the original repository.
Update my local master branch with the latest version of the original online repository, not my fork, “the original”. Let’s check out to my master branch and bring it up to date with the original repository by running git pull upstream master
>>$git checkout master
>>$git pull upstream master    - pull changes from upstream (master remote repository) to my local master
At this time my local master is up-to-date

- Merge the local “master” branch into my change branch. Being on my branch.
>>$git checkout my_branch
my_branch >>$git merge master my_branch

-Resolve conflicts. Get rid of the special lines of the document and the other versions of the file (>>>HEAD, ======merged common ancestors).

-Add the file and commit changes to complete the merge
my_branch>>$git add .
my_branch>>$git commit- Push my change branch to my fork(GitHub)

-Push your local branch to the origin of my fork(remote master in my fork)
my_branch>>$git push origin my_branch

-I also have my origin/master branch up-to-date, so checkout master and push
>>git checkout master
>>git push origin master

Why is it called Pull Request?
The person who creates the pull request is trying to push their changes into their master, so is not a pull. It’s because this person is requesting that somebody else pull their branch into the master branch. Another good name for this might be a merge request.
So if I make a pull request, I want my collaborator to merge my new branch into master branch.

At this moment in time, there will be listed on GitHub your new branch. 
On GitHub, I should checkout my new branch, scroll down and click Pull Request. By default, GitHub assumes I want to merge my changes into the original repository, but in this case I want to merge into the master branch of my own fork (karlajaramillo/), so click edit and change the base fork. Then, click on Create pull request.

So, my collaborators can see the pull requests and see that I’d like to merge these changes into master. My collaborators will have an email with the pull requests. They have to make sure that the code works. They can leave comments if there is a conflict or error.
Finally, if my collaborators decide that the change is good and ready to be pulled, then press on Merge pull request button.
